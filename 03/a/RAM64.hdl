// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
        // We need to split the load bit again, this time using the three
        // last bits of the address.
        DMux8Way(in=load, sel=address[3..5],
            a=loadA, b=loadB, c=loadC, d=loadD,
            e=loadE, f=loadF, g=loadG, h=loadH);

        //Our 8 RAM8 Chips
        RAM8(in=in, address=address[0..2], load=loadA, out=outA);
        RAM8(in=in, address=address[0..2], load=loadB, out=outB);
        RAM8(in=in, address=address[0..2], load=loadC, out=outC);
        RAM8(in=in, address=address[0..2], load=loadD, out=outD);

        RAM8(in=in, address=address[0..2], load=loadE, out=outE);
        RAM8(in=in, address=address[0..2], load=loadF, out=outF);
        RAM8(in=in, address=address[0..2], load=loadG, out=outG);
        RAM8(in=in, address=address[0..2], load=loadH, out=outH);

        // And again, we need to select the outputs, based on the last 3 bits
        // of the address.
        Mux8Way16(a=outA, b=outB, c=outC, d=outD,
                  e=outE, f=outF, g=outG, h=outH,
                  sel=address[3..5], out=out);
}